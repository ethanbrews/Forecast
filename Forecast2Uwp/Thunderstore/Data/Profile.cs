using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Forecast2Uwp.Profile;
//
//    var profile = Profile.FromJson(jsonString);

namespace Forecast2Uwp.Thunderstore.Data.Profile
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Profile : INotifyPropertyChanged
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("shareCode")]
        public string ShareCode { get; set; }

        [JsonProperty("packageFullNames")]
        public string[] PackageFullNames { get; set; }

        [JsonProperty("autoUpdate")]
        public bool AutoUpdate { get; set; }

        //Generate Package[] where the full version name is in PackageFullNames and set Package.Versions to an array of size 1 with the matching version. 
        [JsonIgnore]
        public Data.Package[] Packages
        {
            get
            {
                if ((App.Current as App).ThunderstorePackages is null)
                    return null;
                var toReturn = new List<Data.Package>();
                foreach (var (pkg, version) in from name in PackageFullNames
                                               from pkg in (App.Current as App).ThunderstorePackages
                                               from version in pkg.Versions
                                               where version.FullName == name
                                               select (pkg, version))
                {
                    pkg.Versions = new Data.Version[] { version };
                    toReturn.Add(pkg);
                }

                return toReturn.ToArray();
            }
        }

        [field: JsonIgnore]
        public event PropertyChangedEventHandler PropertyChanged;

        public void ChangedProperty(string name) => PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));
    }

    public partial class Profile
    {
        public static Profile[] FromJson(string json) => JsonConvert.DeserializeObject<Profile[]>(json, Forecast2Uwp.Thunderstore.Data.Profile.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Profile[] self) => JsonConvert.SerializeObject(self, Forecast2Uwp.Thunderstore.Data.Profile.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}

