// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Forecast2Uwp.RemoteConfig;
//
//    var config = Config.FromJson(jsonString);

namespace Forecast2Uwp.RemoteConfig
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using System.Linq;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Config
    {
        [JsonProperty("version")]
        public string Version { get; set; } = "0.0";

        [JsonProperty("profile-installer")]
        public ProfileInstaller ProfileInstaller { get; set; }

        [JsonProperty("features")]
        public Features Features { get; set; }

        [JsonProperty("launch-message")]
        public LaunchMessage[] LaunchMessage { get; set; }
    }

    public partial class Features
    {
        [JsonProperty("config-editor-page")]
        public Feature ConfigEditorPage { get; set; }

        [JsonProperty("download-page")]
        public Feature DownloadPage { get; set; }

        [JsonProperty("play-page")]
        public Feature PlayPage { get; set; }

        [JsonProperty("thunderstore-page")]
        public Feature ThunderstorePage { get; set; }

        [JsonProperty("settings-page")]
        public Feature SettingsPage { get; set; }

        [JsonProperty("share-profiles-enabled")]
        public Feature ShareProfilesEnabled { get; set; }

        [JsonProperty("edit-profiles-enabled")]
        public Feature EditProfilesEnabled { get; set; }

        [JsonProperty("update-profiles-enabled")]
        public Feature UpdateProfilesEnabled { get; set; }

        [JsonProperty("recently-shared-pane-enabled")]
        public Feature RecentlySharedPaneEnabled { get; set; }
    }

    public partial class Feature
    {
#if DEBUG
        [JsonIgnore]
        private bool IsDebugBuild = true;
#else
        [JsonIgnore]
        private bool IsDebugBuild = false;
#endif

        private string CurrentVersion;


        [JsonProperty("enable")]
        public bool Enable { get; set; } = true;

        [JsonProperty("conditions")]
        public Conditions Conditions { get; set; }

        public bool IsEnabled =>
            Enable &&
            ((IsDebugBuild && (Conditions?.OnlyInDebug ?? false)) || !(Conditions?.OnlyInDebug ?? false)) &&
            (Conditions?.FeatureGroupMin ?? 0) < Options.FeatureGroup.Value &&
            (Conditions?.OnlyInVersions ?? new string[] { Options.AppVersion }).Contains(Options.AppVersion);
    }

    public partial class Conditions
    {
        [JsonProperty("only-in-debug")]
        public bool OnlyInDebug { get; set; }

        [JsonProperty("feature-group-min")]
        public int FeatureGroupMin { get; set; }

        [JsonProperty("only-in-versions")]
        public string[] OnlyInVersions { get; set; }
    }

    public partial class LaunchMessage
    {
        [JsonProperty("guid")]
        public string Guid { get; set; }

        [JsonProperty("show-once")]
        public bool ShowOnce { get; set; }

        [JsonProperty("show-delay")]
        public long ShowDelay { get; set; }

        [JsonProperty("show-on-app-version-only")]
        public string[] ShowOnAppVersionOnly { get; set; }

        [JsonProperty("date-range")]
        public DateRange DateRange { get; set; }

        [JsonProperty("show-every-n-launches")]
        public long ShowEveryNLaunches { get; set; }

        [JsonProperty("message")]
        public Message Message { get; set; }
    }

    public partial class DateRange
    {
        [JsonProperty("start")]
        public DateTimeOffset Start { get; set; }

        [JsonProperty("end")]
        public DateTimeOffset End { get; set; }
    }

    public partial class Message
    {
        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("body")]
        public string Body { get; set; }

        [JsonProperty("primaryButtonText")]
        public string PrimaryButtonText { get; set; }

        [JsonProperty("primaryButtonHref")]
        public Uri PrimaryButtonHref { get; set; }

        [JsonProperty("secondaryButtonText")]
        public string SecondaryButtonText { get; set; }
    }

    public partial class ProfileInstaller
    {
        [JsonProperty("ignore-files")]
        public string[] IgnoreFiles { get; set; }

        [JsonProperty("file-specifiers")]
        public FileSpecifiers FileSpecifiers { get; set; }
    }

    public partial class FileSpecifiers
    {
        [JsonProperty("ror2")]
        public string[] Ror2 { get; set; }

        [JsonProperty("bepis")]
        public string[] Bepis { get; set; }

        [JsonProperty("config")]
        public string[] Config { get; set; }
    }

    public partial class Config
    {
        public static Config FromJson(string json) => JsonConvert.DeserializeObject<Config>(json, Forecast2Uwp.RemoteConfig.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Config self) => JsonConvert.SerializeObject(self, Forecast2Uwp.RemoteConfig.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            Formatting = Formatting.Indented,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
